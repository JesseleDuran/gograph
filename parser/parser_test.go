package parser

import (
	"github.com/JesseleDuran/osm-graph-parser/coordinates"
	"github.com/JesseleDuran/osm-graph-parser/graph"
	"github.com/JesseleDuran/osm-graph-parser/graph/shortest_path/dijkstra"
	"log"
	"testing"
)

func TestFromOSMFileV2(t *testing.T) {
	g, _ := FromOSMFileV2("test-w-w-w.osm")
	rr, _ := graph.RestrictionsFromFile("test-w-w-w.osm", g)
	g.AddRestrictions(rr)
	log.Println(len(g.Nodes))
	for _, n := range g.Nodes {
		log.Println(n.ID, n.Edges)
	}
}

func TestFromOSMFile(t *testing.T) {
	g, _ := FromOSMFileV2("testdata/Bogota.osm")
	restrictions, err := graph.RestrictionsFromFile("testdata/Bogota.osm", g)
	if err != nil {
		t.Fatal(err)
	}
	log.Println("restrictions", len(restrictions))
	g.AddRestrictions(restrictions)
	log.Println("starting dijsktra")
	d := dijkstra.DijkstraV2{Graph: g}
	r := d.FromCoordinates(coordinates.Coordinates{
		Lat: 4.696303787649028,
		Lng: -74.04557051522043,
	}, coordinates.Coordinates{
		Lat: 4.614840229481626,
		Lng: -74.1368856261583,
	})
	log.Println(r.TotalWeight, len(r.Polyline))
	ids := make([]int, 0)
	for _, c := range r.Polyline {
		//fmt.Println("[", c[0], ",", c[1], "],")
		ids = append(ids, int(c[2]))
	}
	log.Println(ids[0], ids[len(ids)-2])
	//shouldBe := []int64{340434617, 340434590, 8000949863, 7631440949, 294768644, 338972504, 262391208, 8000949872, 8000949878, 8000949856, 8000949873, 311437209, 8000949855, 8000949874, 8000949875, 7631453031, 311437244, 8000949876, 262391209, 4151477687, 8000949860, 1379559358, 8000949853, 5569362758, 262391211, 5569362757, 7722889510, 834625961, 329426044, 273237161, 7631433274, 3067418418, 5537977308, 7722889511, 310954913, 8414021016, 392271845, 5115563457, 5115563458, 6186328242, 5569365143, 6186328243, 5569365142, 476355695, 5569365148, 5569365146, 311449236, 477881773, 312420312, 312420099, 1774287659, 7722889513, 7631476050, 311437433, 6746528170, 311437571, 6788429872, 6788429875, 340424134, 6788429858, 6746521547, 6746528172, 575354421, 340071369, 6788392460, 275731730, 7631511920, 340424053, 340424052, 340424055, 964488533, 5719224786, 575353736, 822484556, 822484548, 479274038, 311450071, 311450086, 311450087, 5721248512, 311450088, 5721248511, 5115572279, 320305542, 311450090, 5115572280, 5115572282, 885733633, 5587112496, 5587112497, 5587112498, 885733660, 5721230917, 5587112494, 5587112502, 5587112501, 885733643, 5721230915, 5161201860, 1364000693, 4447864287, 885733635, 1993229322, 3881271924, 7594206356, 312418911, 1350287928, 1350287925, 5587112490, 262391022, 3881271919, 3881271918, 6909772272, 6909772271, 6909772270, 6909772268, 6909772269, 5517600253, 5502430791, 6909751555, 6366778868, 6909751557, 320301796, 4730046542, 4730049856, 5956011928, 5724334023, 5956011923, 1849831974, 5724334022, 5724334024, 1849831975, 5724334025, 261137978, 5724334032, 5724334031, 5724334033, 601196932, 5724334034, 261137983, 5116187026, 5116187025, 5116187023, 5724334139, 988487499, 5724334138, 598147259, 988487505, 5517589448, 261137994, 5724334123, 261137999, 5724334179, 3632265974, 3632265977, 5231466982, 348024187, 5724343766, 5724343767, 8214863747, 261138015, 261187771, 3881012460, 261187564, 3881011359, 261138017, 5517589383, 6981114598, 5233349135, 5143525050, 5116164335, 3881011430, 5726212263, 1349548665, 5750311405, 1239181094, 5517572475, 5517572474, 5231466986, 5750311404, 310939136, 5750311403, 310939138, 5517572470, 310939143, 310939159, 310939179, 5517572469, 5750311402, 310939186, 5517572463, 5750311401, 310939209, 5517572456, 5750311400, 5517572467, 310939270, 5750311813, 310939276, 5750311398, 310939281, 5113742677, 5750311397, 5145228276, 5113742678, 310939291, 5772095575, 919249233, 7613262151, 5764970691, 5764970680, 968370578, 968370617, 310939357, 261188204, 5764970674, 1996231340, 261188199, 261188198, 5764943947, 5764943946, 261188188, 5764943945, 261188184, 261188182, 261138103, 5764943944, 1008249750, 1008249467, 5764943941, 5764943939, 5764944011, 2422420991, 5947560522, 8238471688, 8238471683, 1008249534, 262419466, 261188673, 5764869763, 261188670, 261188606, 261138147, 7610056799, 261138152, 6069899159, 5785274485, 5785274486, 1008249585, 1008249896, 5785274506, 1008249301, 5657964857, 5785274508, 2393047956, 5107741737, 261138168, 2393047950, 5785274516, 5791799736, 261138173, 2393047931, 5593061723, 4054696059, 4054696057, 261138184, 266042781, 5239874690, 5233434991, 5797432263, 5791830290, 1850796045, 5791830272, 261138202, 7578968216, 5791830274, 5791830294, 5791830295, 1373371137, 5791830297, 261138218, 261138223, 312766919, 7579048653, 5791830303, 261137602, 2361888119, 2393113117, 582542178, 2393113105, 2393113100, 5791830344, 261137593, 2393113096, 5791830345, 261137590, 5791830346, 2393113081, 5239925746, 5891256058, 5235224240, 2393113057, 5239981324, 261137584, 5235224242, 5103535549, 2393113014, 5891256692, 5891186865, 5235224244, 261673183, 5404775957, 261137576, 5404775951, 5891256820, 5103546842, 9021406330, 7073920662, 9021406323, 5235567624, 7073920665, 6010981772, 5235014027, 5891262002, 5103780325, 634173089, 5891262006, 5891256853, 5910089480, 261137556, 5910089478, 5103873164, 5910089477, 5910089476, 634173205, 5235014030, 261137545, 6010882508, 339926860, 6010814974, 339926847, 6013248747, 2361888096, 3698898610, 1818340153, 6010814979, 6010814980, 6010814981, 3698898623, 310599238, 7579130894, 6010814982, 310599239, 310599241, 6013084462, 310599242, 310599243, 3160435700, 317173723, 310598895, 4082068790, 317173858, 466981234, 1043935231, 310598896, 6013123662, 7626613713, 310598897, 261629912, 6013123677, 261629913, 317175022, 317175023, 7626600489, 8448318481, 310334144, 7626539484, 1043885709, 317174395}

	w, prev := d.FromNodeIDs(340434617, 317174395)
	log.Println(len(w), len(prev))
}

func TestRestrictions(t *testing.T) {
	tests := []struct {
		name             string
		graphFile        string
		originID         int64
		destinyID        int64
		expectedLenNodes int
		restrictionFile  string
	}{
		//{
		//	name:             "Diff from multiple restrictions",
		//	graphFile:        "testdata/diff_from_multiple_restrictions.osm",
		//	originID:         1,
		//	destinyID:        9,
		//	expectedLenNodes: 8,
		//	restrictionFile:  "testdata/diff_from_multiple_restrictions.osm",
		//},
		{
			name:             "Diff from multiple restrictions",
			graphFile:        "testdata/diff_from_multiple_restrictions.osm",
			originID:         4,
			destinyID:        8,
			expectedLenNodes: 3,
			restrictionFile:  "testdata/diff_from_multiple_restrictions.osm",
		},
		//{
		//	name:             "Simple way way way",
		//	graphFile:        "testdata/simple_way_way_way.osm",
		//	originID:         1,
		//	destinyID:        6,
		//	expectedLenNodes: 7,
		//	restrictionFile:  "testdata/simple_way_way_way.osm",
		//},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			for {
				g, err := FromOSMFileV2(tt.graphFile)
				if err != nil {
					t.Fatal(err)
				}
				restrictions, err := graph.RestrictionsFromFile(tt.restrictionFile, g)
				if err != nil {
					t.Fatal(err)
				}
				g.AddRestrictions(restrictions)
				d := dijkstra.DijkstraV2{Graph: g}

				_, got := d.FromNodeIDs(tt.originID, tt.destinyID)
				log.Println(got)
				if len(got) != tt.expectedLenNodes {
					t.Fatalf("expect: %d, got: %d", tt.expectedLenNodes, len(got))
				}
			}
		})
	}

}
